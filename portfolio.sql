-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Хост: localhost
-- Время создания: Май 05 2025 г., 23:26
-- Версия сервера: 5.7.27-30-log
-- Версия PHP: 8.3.19

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `portfolio`
--

-- --------------------------------------------------------

--
-- Структура таблицы `blog_posts`
--

CREATE TABLE `blog_posts` (
  `id` int(11) NOT NULL,
  `date` varchar(20) NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `fullcontent` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Дамп данных таблицы `blog_posts`
--

INSERT INTO `blog_posts` (`id`, `date`, `title`, `content`, `fullcontent`) VALUES
(34, '02.05 13:32', 'CSS Reset: минималистичный и современный подход', 'В статье представлен легкий и актуальный CSS Reset, предназначенный для чистого старта при HTML/CSS-верстке. Рассматриваются ключевые принципы сброса стилей, особенности подхода, а также преимущества использования минималистичного решения вместо громоздких библиотек.', '<p>\nВ этой статье представлен минималистичный CSS Reset, созданный с учётом современных требований к вёрстке. Он помогает избавиться от непредсказуемых стилей по умолчанию в разных браузерах и формирует чистую, удобную основу для старта любого проекта. Мы рассмотрим сам код и подробно разберём каждый его блок.\n</p>\n\n\n\n<pre><code class=\"language-css\">/* Box sizing reset */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margins */\nbody,\nh1, h2, h3, h4, h5, h6,\np, figure,\nblockquote, dl, dd {\n  margin: 0;\n}\n\n/* Remove list styles */\nul, ol {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\nhtml {\n  -webkit-text-size-adjust: 100%;\n  height: 100%;\n}\n\n/* Set body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  background-color: #fff;\n  color: #111;\n}\n\n/* Headings */\nh1, h2, h3, h4, h5, h6 {\n  font-weight: 600;\n  line-height: 1.2;\n}\n\n/* Media elements */\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n\n/* Inherit font for form elements */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  color: inherit;\n  background: none;\n  border: none;\n  outline: none;\n}\n\n/* Basic button & link styles */\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n}\na {\n  color: inherit;\n  text-decoration: none;\n}\na:focus,\nbutton:focus {\n  outline: 2px solid Highlight;\n  outline-offset: 2px;\n}\n\n/* Accessibility: reduce motion */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n    scroll-behavior: auto;\n  }\n\n  *, *::before, *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}</code></pre>\n\n<p>Этот минималистичный CSS Reset решает несколько ключевых задач:</p>\n\n<h4>1. Box-sizing</h4>\n<pre><code class=\"language-css\">*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}</code></pre>\n<p>\nЭтот блок устанавливает правило, при котором padding и border включаются в размеры элемента. Это упрощает расчёты ширины и высоты и делает поведение элементов более предсказуемым.\n</p>\n\n<h4>2. Сброс отступов</h4>\n<pre><code class=\"language-css\">body,\nh1, h2, h3, h4, h5, h6,\np, figure,\nblockquote, dl, dd {\n  margin: 0;\n}\n</code></pre>\n\n<p>\nУдаляет стандартные отступы браузера, которые могут отличаться и мешать выравниванию элементов. Это помогает создать единый и чистый вид на всех устройствах.\n</p>\n\n<h4>3. Сброс стилей списков</h4>\n<pre><code class=\"language-css\">ul, ol {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}</code></pre>\n<p>\nЭтот блок удаляет маркеры и отступы у списков, позволяя вам полностью контролировать их внешний вид через кастомные стили.\n</p>\n\n<h4>4. Корневые настройки</h4>\n<pre><code class=\"language-css\">html:focus-within {\n  scroll-behavior: smooth;\n}\nhtml {\n  -webkit-text-size-adjust: 100%;\n  height: 100%;\n}</code></pre>\n<p>\nЗдесь настраиваются свойства, такие как плавная прокрутка при переходах по якорям и корректное поведение текста на устройствах с iOS, а также гарантируется, что высота будет равна 100%.\n</p>\n\n<h4>5. Настройки для body</h4>\n<pre><code class=\"language-css\">body {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  background-color: #fff;\n  color: #111;\n}</code></pre>\n<p>\nЗадаются базовые стили для текста и фона страницы. Использование системных шрифтов и настройка min-height: 100vh позволяют создавать гибкую, адаптивную верстку.\n</p>\n\n<h4>6. Заголовки</h4>\n<pre><code class=\"language-css\">h1, h2, h3, h4, h5, h6 {\n  font-weight: 600;\n  line-height: 1.2;\n}</code></pre>\n<p>\nУстанавливаются единые параметры для всех заголовков, чтобы они имели одинаковую жирность и межстрочное расстояние.\n</p>\n\n<h4>7. Медиа элементы</h4>\n<pre><code class=\"language-css\">img,\npicture,\nvideo,\ncanvas,\nsvg {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}</code></pre>\n<p>\nОбеспечивается правильное отображение медиаэлементов: изображения и видео всегда будут масштабироваться в пределах доступного контейнера, не выходя за его пределы.\n</p>\n\n<h4>8. Формы</h4>\n<pre><code class=\"language-css\">input,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  color: inherit;\n  background: none;\n  border: none;\n  outline: none;\n}</code></pre>\n<p>\nЭтот блок удаляет стандартные стили для всех форм, таких как кнопки, инпуты и textarea, и позволяет применять их стили через CSS.\n</p>\n\n<h4>9. Кнопки и ссылки</h4>\n<pre><code class=\"language-css\">button {\n  cursor: pointer;\n  background: none;\n  border: none;\n}\na {\n  color: inherit;\n  text-decoration: none;\n}\na:focus,\nbutton:focus {\n  outline: 2px solid Highlight;\n  outline-offset: 2px;\n}</code></pre>\n<p>\nУдаляются дефолтные стили для кнопок и ссылок, чтобы они наследовали цвета и не имели подчеркивания. Также добавляется визуальный фокус для улучшения доступности.\n</p>\n\n<h4>10. Поддержка prefers-reduced-motion</h4>\n<pre><code class=\"language-css\">@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n    scroll-behavior: auto;\n  }\n\n  *, *::before, *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}</code></pre>\n<p>\nЭтот блок включает настройку, которая уменьшает или отключает анимации и плавные переходы для пользователей с активированным режимом \"уменьшить движение\".\n</p>\n<h4>Заключение</h4>\n<p> Представленный CSS Reset - это современный и минималистичный подход к нормализации стилей. Он решает ключевые проблемы кросс-браузерной совместимости, сохраняя при этом гибкость для разработчиков. </p>\n<p> Основные преимущества этого подхода:\n  <ul>\n    <li>Минимальный размер (всего около 1KB)</li>\n    <li>Сохранение доступности и семантики</li>\n    <li>Улучшенная производительность за счёт оптимизаций</li>\n    <li>Поддержка современных стандартов</li>\n  </ul>\n</p>\n<p> Этот reset можно использовать как основу для любого проекта. При необходимости вы можете:\n  <ul>\n    <li>Добавлять свои правила поверх этого базового сброса</li>\n    <li>Модифицировать отдельные параметры под конкретные нужды</li>\n    <li>Комбинировать с другими нормализующими стилями</li>\n  </ul>\n</p>\n<p> Для более сложных проектов рассмотрите возможность расширения этого сброса дополнительными правилами, такими как сброс табличных стилей или кастомных свойств CSS. </p>\n<p> <strong>Совет:</strong> Сохраните этот reset в отдельный CSS-файл (например, <code>reset.css</code>) и подключайте его первым в вашем проекте, перед основными стилями. </p>\n\n'),
(35, '03.05.2025', 'Почему float — это боль (и как Flexbox и Grid спасли нас)', 'История о том, как я наивно использовал float для вёрстки и столкнулся с хаосом: схлопывающиеся родители, сломанные отступы и проваливающиеся колонки. Разберу, почему float — это пережиток прошлого, и покажу, как Flexbox и Grid решают те же задачи без костылей. Для тех, кто только начинает и хочет верстать без боли!', '<p>\nКогда я только начал верстать, мне казалось, что float — это волшебное свойство, которое «притягивает» блоки друг к другу. Хочу колонки? float: left. Хочу обтекание картинки текстом? float: right. Но чем дальше, тем больше я понимал, что float — это не инструмент вёрстки, а источник кошмаров. Вот почему.\n</p>\n\n<h4>1. Float ломает поток документа</h4>\n<p>\n  Элементы с <code>float</code> вырываются из нормального потока, и родительский блок <strong>перестаёт их учитывать.</strong>\n</p>\n\n<pre><code class=\"language-html\">&lt;div class=\"parent\"&gt;\n  &lt;div class=\"child\" style=\"float: left;\"&gt;Я floated!&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<p>\n  Родитель (<strong>parent</strong>) схлопнется, как будто внутри него ничего нет. Чтобы это исправить, приходится:\n</p>\n\n<ul>\n  <li>Добавлять <code>overflow: hidden</code> (но это может обрезать контент).</li>\n  <li>Использовать хаки вроде <code>clearfix</code> (зачем мне вообще хаки в 2025 году?).</li>\n</ul>\n\n<h4>2. Глюки с margin и padding</h4>\n<p>\nЕсли у floated-элемента и соседа есть отступы, они могут <strong>неожиданно складываться</strong> или, наоборот, игнорироваться.\n</p>\n\n<pre><code class=\"language-css\">.float-left { float: left; margin-right: 20px; }  \n.text { margin-left: 20px; } /* Может прилипнуть вплотную! */</code></pre>\n\n<h4>3. Кривые колонки разной высоты</h4>\n<p>\nХочешь сделать сетку из трёх колонок?\n</p>\n\n<pre><code class=\"language-css\">.column { float: left; width: 33%; }</code></pre>\n\n<p>Но если контент в колонках разный, одна из них может «провалиться» вниз, и вся вёрстка едет.</p>\n\n<h4>Решение 2010-х:</h4>\n<pre><code class=\"language-css\">.clearfix::after { content: \"\"; display: table; clear: both; }</code></pre>\n\n<h4>Решение 2024:</h4>\n<pre><code class=\"language-css\">.parent { display: grid; grid-template-columns: 1fr 1fr 1fr; }</code></pre>\n\n<h4>4. Float не для layout!</h4>\n<p><code>float</code> создан для <strong>обтекания текстом</strong> (например, картинки в статье), но его стали использовать для всей вёрстки. Это как забивать гвозди микроскопом.</p>\n\n<h4>5. Flexbox и Grid убили float</h4>\n<p>Современные инструменты делают то же самое, но без боли:</p>\n<div class=\"table-container\">\n<table>\n  <thead>\n    <tr>\n      <th>Задача</th>\n      <th>Float-версия</th>\n      <th>Современная версия</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Колонки одинаковой высоты</td>\n      <td><code>float</code> + <code>clearfix</code></td>\n      <td><code>display: grid</code></td>\n    </tr>\n    <tr>\n      <td>Гибкие промежутки</td>\n      <td>margin hacks</td>\n      <td><code>gap</code> в Flex/Grid</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<h4>Вывод</h4>\n<p><code>float</code> — это архаика, оставшаяся с времён, когда верстальщики молились на IE6. Сегодня есть Flexbox и Grid, которые делают вёрстку предсказуемой.</p>\n\n<p><strong>Мой совет:</strong> учи <code>float</code> только чтобы поддерживать старые проекты (или чтобы понять, как НЕ надо верстать).</p>'),
(36, '03.05 15:20', 'Почему мой div на 2px шире, чем в Figma (и как это исправить)', 'Разбираю главные причины, когда div\'ы оказываются шире/уже на те самые 2px: кривые боксы, шрифты с артефактами, незаметные margin\'ы и баги округления. Показываю, как исправить это одним свойством CSS и парочкой лайфхаков.', '<p>\nКогда я только начал верстать, то столкнулся с досадной проблемой: вроде всё перенёс из Figma один в один, \nно на сайте элементы оказывались чуть шире или уже, чем в макете. Чаще всего - ровно на 2 пикселя. \nПосле часов гугления и экспериментов я разобрался, в чём дело. Вот основные причины и способы их исправить.\n</p>\n\n<h4>1. Границы (border) и отступы (padding) «съедают» ширину</h4>\n<p>\nВ Figma элементы часто рисуют без учёта рамок и внутренних отступов, а в CSS они добавляются к общей ширине, \nесли не указать <code>box-sizing: border-box</code>.\n</p>\n\n<pre><code class=\"language-css\">div {\n  width: 200px; /* По макету */\n  padding: 10px; /* +20px к ширине! */\n  border: 1px solid #000; /* +2px к ширине! */\n}</code></pre>\n\n<p>Итоговая ширина: 222px вместо 200px.</p>\n\n<h4>Решение:</h4>\n<pre><code class=\"language-css\">div {\n  box-sizing: border-box; /* Волшебное свойство */\n  width: 200px;\n  padding: 10px; /* Теперь padding и border не увеличат ширину */\n  border: 1px solid #000;\n}</code></pre>\n\n<p><strong>Совет:</strong> Добавь в начало CSS:</p>\n<pre><code class=\"language-css\">* {\n  box-sizing: border-box; /* Применяется ко всем элементам */\n}</code></pre>\n\n<h4>2. Разные алгоритмы сглаживания шрифтов (антиалиасинг)</h4>\n<p>\nВ Figma и браузерах текст может рендериться немного по-разному, из-за чего:\n</p>\n<ul>\n  <li>Шрифт кажется чуть шире/уже</li>\n  <li>Высота строки (line-height) может «поплыть»</li>\n</ul>\n\n<h4>Решение:</h4>\n<ul>\n  <li>Проверь, точно ли у тебя подключён тот же шрифт, что в Figma</li>\n  <li>Попробуй добавить:</li>\n</ul>\n\n<pre><code class=\"language-css\">body {\n  -webkit-font-smoothing: antialiased; /* Для MacOS */\n  -moz-osx-font-smoothing: grayscale;\n}</code></pre>\n\n<h4>3. Неучтённые margin или прокрутка</h4>\n<p>\nИногда:\n</p>\n<ul>\n  <li>У элемента есть незаметный margin (например, у &lt;body&gt; по умолчанию margin: 8px)</li>\n  <li>Появляется скролл, который «съедает» пару пикселей</li>\n</ul>\n\n<h4>Решение:</h4>\n<pre><code class=\"language-css\">body {\n  margin: 0; /* Убираем стандартные отступы */\n  overflow-x: hidden; /* На всякий случай */\n}</code></pre>\n\n<h4>4. Разное округление дробных значений</h4>\n<p>\nFigma может показывать целые числа, но на деле размеры - дробные (например, 200.4px). Браузеры округляют их по-своему.\n</p>\n\n<h4>Решение:</h4>\n<ul>\n  <li>Включи в Figma отображение дробных значений</li>\n  <li>Если очень критично - используй <code>transform: translateZ(0)</code></li>\n</ul>\n\n<h4>5. Разница в рендеринге между браузерами</h4>\n<p>\nChrome, Firefox и Safari могут по-разному интерпретировать одни и те же стили.\n</p>\n\n<h4>Решение:</h4>\n<ul>\n  <li>Проверяй вёрстку в нескольких браузерах</li>\n  <li>Используй CSS-ресеты (например, normalize.css)</li>\n</ul>\n\n<h4>Как проверить, что всё точно совпадает?</h4>\n<ol>\n  <li><strong>Pixel Perfect</strong> - расширение для Chrome, которое накладывает макет Figma поверх страницы</li>\n  <li><strong>Ручной замер</strong> - DevTools (Ctrl + Shift + C) и сравнение с Figma (Ctrl + R для линеек)</li>\n</ol>\n\n<h4>Вывод</h4>\n<p>\nЧаще всего проблема в <code>box-sizing</code> и отступах. Добавь <code>border-box</code> в начало CSS - и 80% расхождений исчезнут!\n</p>');

-- --------------------------------------------------------

--
-- Структура таблицы `projects`
--

CREATE TABLE `projects` (
  `id` int(11) NOT NULL,
  `type` enum('big','small') NOT NULL,
  `image` varchar(255) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` text,
  `technologies` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `content` longtext,
  `links` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Дамп данных таблицы `projects`
--

INSERT INTO `projects` (`id`, `type`, `image`, `title`, `description`, `technologies`, `content`, `links`) VALUES
(1, 'big', 'https://vlasovdevcore.ru/images/project/articore.png', 'ArtiCore - 3D-печать моделей на заказ', '<h2>Сайт для заказа 3D-печати с интерактивным просмотром моделей</h2>\n\n<p>\nКомплексное решение для заказа 3D-печати с полным циклом оформления — от просмотра моделей прямо в браузере до оплаты и доставки готовых изделий.\n</p>\n\n<h4>Главные фишки:</h4>\n\n<div>\n  <div>\n    <h5>1. Удобный просмотр моделей</h5>\n    <ul>\n      <li>3D-просмотрщик прямо на сайте (поворот, масштабирование)</li>\n      <li>Поддержка форматов STL и GLB</li>\n      <li>Быстрая загрузка даже тяжелых моделей</li>\n    </ul>\n  </div>\n\n  <div>\n    <h5>2. Процесс заказа</h5>\n    <ul>\n      <li>Оплата картами и электронными кошельками (ЮKassa)</li>\n      <li>Расчет стоимости доставки (интеграция с Почтой России)</li>\n      <li>Личный кабинет с историей заказов</li>\n    </ul>\n  </div>\n\n  <div>\n    <h5>3. Технические решения</h5>\n    <ul>\n      <li>Умное хранение моделей (ZIP-архивы экономят 40% места)</li>\n      <li>Автоматическая очистка временных файлов</li>\n      <li>Защита от несанкционированного доступа</li>\n    </ul>\n  </div>\n</div>\n\n<h4>Польза для бизнеса:</h4>\n<div>\n  <div>\n    <span >+27%</span>\n    <span>к заказам за счет 3D-просмотра</span>\n  </div>\n  <div>\n    <span >-15%</span>\n    <span>затрат на хранение файлов</span>\n  </div>\n</div>\n\n<h4>Мой опыт в проекте:</h4>\n<ul>\n  <li>Разработка 3D-просмотрщика на Three.js</li>\n  <li>Работа с файловой системой сервера</li>\n  <li>Интеграция платежей и доставки</li>\n</ul>\n\n<h4>Функционал личного кабинета:</h4>\n<div>\n  <div>\n\n    <span>История всех заказов</span>\n  </div>\n  <div>\n\n    <span>Текущий статус изготовления</span>\n  </div>\n  <div>\n\n    <span>Уведомления о готовности</span>\n  </div>\n  <div>\n    <span>Возможность повторить заказ</span>\n  </div>\n</div>\n\n<p>\nПроект демонстрирует мой опыт в создании комплексных решений — от интерактивной 3D-визуализации до сложной backend-логики.\n</p>\n', '[\"HTML\", \"CSS\", \"PHP\", \"JavaScript\", \"MySQL\"]', NULL, '[{\"label\": \"Посмотреть проект\", \"url\": \"https://articore.ru/\"}]'),
(2, 'big', 'https://vlasovdevcore.ru/images/project/stepcond.png', 'StepCond - интернет-магазн климатической техники', '<p>\n  StepCond – это интернет-магазин климатического оборудования с удобным каталогом, корзиной, избранным и функцией сравнения товаров.\n</p>\n\n<h4>Описание проекта</h4>\n<p>Проект включает:</p>\n\n<ul>\n  <li>Каталог с фильтрацией и поиском</li>\n  <li>Корзину и оформление заказа</li>\n  <li>Возможность добавлять товары в избранное</li>\n  <li>Сравнение неограниченного количества товаров</li>\n  <li>Кастомную админ-панель для управления контентом</li>\n</ul>\n\n<h4>Технологии</h4>\n<h5>Frontend:</h5>\n<ul>\n  <li>HTML</li>\n  <li>CSS</li>\n  <li>JavaScript</li>\n  <li>Bootstrap</li>\n</ul>\n\n<h5>Backend:</h5>\n<ul>\n  <li>PHP</li>\n  <li>MySQL</li>\n</ul>\n\n<h5>1. Прокачанные навыки</h5>\n<ul>\n  <li>Углублённая работа с PHP и MySQL</li>\n  <li>Оптимизация SQL-запросов для быстрой загрузки каталога</li>\n  <li>Реализация сложных функций (сравнение товаров, динамическая корзина)</li>\n</ul>\n\n<h5>2. Практический результат</h5>\n<ul>\n  <li>Магазин успешно обрабатывает 400+ заказов в сезон</li>\n  <li>Удобный интерфейс для пользователей и администраторов</li>\n</ul>\n\n<p>\n  Проект показал, что даже без сложных элементов (личный кабинет, аналитика) можно создать эффективный и удобный магазин.\n</p>', '[\"HTML\", \"CSS\", \"PHP\", \"Bootstrap\", \"JavaScript\", \"MySQL\"]', NULL, '[{\"label\": \"Посмотреть проект\", \"url\": \"https://stepcond.ru/\"}]'),
(3, 'small', 'https://vlasovdevcore.ru/images/project/cinematic.png', 'Cinematic Scroll Slider\n', '  <p>\n    Это интерактивный горизонтальный слайдер, отображающий карточки фильмов.\n    Пользователь может прокручивать контент с помощью мыши или тачпада.\n    При наведении на карточку появляется эффект увеличения изображения и градиентный номер фильма,\n    нарисованный с помощью SVG.\n  </p>\n\n  <h2>Функционал</h2>\n  <ul>\n    <li><strong>Горизонтальная прокрутка</strong> с помощью мыши или пальца (drag to scroll)</li>\n    <li><strong>Инерционное скольжение</strong> после быстрого свайпа</li>\n    <li><strong>Эффекты при наведении</strong>:\n      <ul>\n        <li>Увеличение изображения</li>\n        <li>Появление SVG-номера с градиентом</li>\n      </ul>\n    </li>\n    <li><strong>Адаптивность</strong> и скрытие стандартного скроллбара</li>\n  </ul>\n\n  <h2>Технологии</h2>\n<div class=\"table-container\">\n  <table>\n    <thead>\n      <tr>\n        <th>Технология</th>\n        <th>Назначение</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>HTML</td>\n        <td>Структура страницы</td>\n      </tr>\n      <tr>\n        <td>CSS</td>\n        <td>Стилизация, анимации, адаптивность</td>\n      </tr>\n      <tr>\n        <td>JavaScript</td>\n        <td>Логика взаимодействия: drag-n-drop, инерция</td>\n      </tr>\n    </tbody>\n  </table>\n<div>\n\n  <h2>Как всё работает</h2>\n\n  <h4>Создание слайдов</h4>\n  <p>\n    Все элементы создаются динамически на основе массива ссылок на изображения.\n  </p>\n\n  <h4>Перетаскивание</h4>\n  <p>\n    При зажатой кнопке мыши или касании экрана пользователь может \"скроллить\" контент.\n  </p>\n\n  <h4>Инерция</h4>\n  <p>\n    После отпускания слайдер продолжает двигаться с замедлением — имитация физики.\n  </p>\n\n  <h4>Ховер-эффекты</h4>\n  <p>\n    На каждую карточку добавлены плавные анимации при наведении курсора.\n  </p>\n\n  <h4>SVG номера</h4>\n  <p>\n    Каждая карточка содержит SVG-текст с градиентным оформлением, который появляется при ховере.\n  </p>', '[\"HTML\", \"CSS\", \"JavaScript\"]', NULL, '[{\"label\": \"Посмотреть проект\", \"url\": \"https://codepen.io/VlasovDevCore/pen/wBBPjOw\"}]'),
(7, 'small', 'https://vlasovdevcore.ru/images/project/PayCard.png', 'PayCard - Интерактивная форма оплаты с 3D-картой', '<p>\n  Это интерактивная форма оплаты с визуализацией банковской карты. \n  При заполнении формы данные отображаются на 3D-карте, которая может переворачиваться для ввода CVV-кода.\n</p>\n\n<h2>Функционал</h2>\n<ul>\n  <li><strong>Интерактивная 3D-визуализация карты</strong> с лицевой и обратной стороны</li>\n  <li><strong>Автоматическое определение типа карты</strong> по введённому номеру (Visa, Mastercard, МИР и др.)</li>\n  <li><strong>Мгновенное обновление данных</strong> на карте при вводе информации</li>\n  <li><strong>Транслитерация имени</strong> для корректного отображения на карте</li>\n  <li><strong>Плавные анимации и переходы</strong> между сторонами карты</li>\n  <li><strong>Валидация полей</strong> и блокировка кнопки до корректного ввода данных</li>\n</ul>\n\n<h2>Технологии</h2>\n<div class=\"table-container\">\n<table>\n  <thead>\n    <tr>\n      <th>Технология</th>\n      <th>Назначение</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>HTML</td>\n      <td>Структура формы и элементов</td>\n    </tr>\n    <tr>\n      <td>CSS</td>\n      <td>Стилизация, 3D-анимации, адаптивность, градиенты</td>\n    </tr>\n    <tr>\n      <td>JavaScript</td>\n      <td>Логика работы формы: валидация, транслитерация, определение типа карты</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<h2>Как всё работает</h2>\n\n<h4>Отображение карты</h4>\n<p>\n  Форма включает 3D-объект — виртуальную карту, которая имеет две стороны: лицевую и обратную. \n  При фокусе на поле CVV карта плавно переворачивается, чтобы пользователь видел, где ввести секретный код.\n</p>\n\n<h4>Определение типа карты</h4>\n<p>\n  При вводе номера система автоматически распознаёт тип карты (Visa, Mastercard, МИР и другие) и подстраивает цвет и логотип под неё.\n</p>\n\n<h4>Обновление данных в реальном времени</h4>\n<p>\n  По мере заполнения формы информация отображается на карте:\n  номер, имя владельца, срок действия и CVV-код.\n</p>\n\n<h4>Транслитерация имени</h4>\n<p>\n  Имя пользователя автоматически преобразуется в латинские буквы, чтобы соответствовать формату на карте.\n</p>\n\n<h4>Адаптивность</h4>\n<p>\n  Дизайн адаптирован под разные устройства. Форма удобно выглядит как на больших экранах, так и на мобильных телефонах.\n</p>', '[\"HTML\", \"CSS\", \"JavaScript\"]', NULL, '[{\"label\": \"Посмотреть проект\", \"url\": \"https://codepen.io/VlasovDevCore/pen/YPPryQQ\"}]'),
(8, 'small', 'https://vlasovdevcore.ru/images/project/ColorExplorer.png', 'iPhone 16 - Color Explorer', '<p>\n  Это интерактивная страница, посвящённая флагманскому смартфону iPhone 16. \n  Сайт позволяет выбрать цвет устройства, мгновенно меняя изображение, фон и метку цвета.\n</p>\n\n<h2>Функционал</h2>\n<ul>\n  <li><strong>Интерактивный выбор цвета</strong> с обновлением изображения и фона</li>\n  <li><strong>Плавные анимации</strong> при загрузке и смене цвета</li>\n  <li><strong>Адаптивный дизайн</strong>, корректно отображающийся на всех устройствах</li>\n  <li><strong>Отображение названия цвета</strong> при наведении на кнопки выбора</li>\n  <li><strong>Современный минималистичный дизайн</strong> с градиентами и акцентными тенями</li>\n  <li><strong>Предзагрузка изображений</strong> для избежания мерцания при переключении цветов</li>\n</ul>\n\n<h2>Технологии</h2>\n<div class=\"table-container\">\n<table>\n  <thead>\n    <tr>\n      <th>Технология</th>\n      <th>Назначение</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>HTML</td>\n      <td>Структура страницы: блоки с изображением, характеристиками и палитрой цветов</td>\n    </tr>\n    <tr>\n      <td>CSS</td>\n      <td>Стилизация элементов, анимации, темы под разные цвета, адаптивность</td>\n    </tr>\n    <tr>\n      <td>JavaScript</td>\n      <td>Логика переключения цветов, управление DOM, предзагрузка изображений</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<h2>Как всё работает</h2>\n\n<h4>Выбор цвета</h4>\n<p>\n  Пользователь может выбрать один из доступных цветов корпуса iPhone. При клике на кнопку:\n  - Обновляется изображение телефона\n  - Меняется фон страницы\n  - Изменяется текстовая метка цвета\n  - Активная кнопка подсвечивается\n</p>\n\n<h4>Анимации и переходы</h4>\n<p>\n  Все изменения происходят с плавной анимацией: появление заголовка, изменение фона и появление нового изображения. \n  Использованы CSS-переходы и классы активности для управления состоянием.\n</p>\n\n<h4>Работа с изображением</h4>\n<p>\n  Каждый цвет имеет своё изображение. Перед запуском интерфейса JavaScript предзагружает все изображения, чтобы избежать задержек при переключении.\n</p>\n\n<h4>Цветовые темы</h4>\n<p>\n  Цвет фона и текста динамически меняются в зависимости от выбранного цвета устройства. \n  Для каждого цвета используется свой градиентный фон и соответствующая стилизация кнопок.\n</p>\n\n<h4>Адаптивность</h4>\n<p>\n  Дизайн полностью адаптирован под мобильные и десктопные устройства. На экранах шире 1024px контент располагается в две колонки — изображение и информация находятся рядом.\n</p>', '[\"HTML\", \"CSS\", \"JavaScript\"]', NULL, '[{\"label\": \"Посмотреть проект\", \"url\": \"https://codepen.io/VlasovDevCore/pen/OPPQdGJ\"}]'),
(9, 'small', 'https://vlasovdevcore.ru/images/project/NotificationStackUI.png', 'Notification Stack UI', '  <p>Этот проект демонстрирует реализацию интерактивной системы уведомлений с поддержкой трёх типов: <code>error</code>, <code>warning</code> и <code>success</code>. Он включает плавные анимации появления и исчезновения, ограничение на количество одновременно отображаемых уведомлений (не более 5), возможность ручного закрытия и автозакрытие через 5 секунд.</p>\n\n  <h2>Технологии</h2>\n  <ul>\n    <li><strong>HTML</strong> — структура страницы и элементы управления.</li>\n    <li><strong>CSS</strong> — оформление кнопок, уведомлений и анимации.</li>\n    <li><strong>JavaScript</strong> — логика добавления, удаления и управления уведомлениями.</li>\n  </ul>\n\n  <h2>Основные функции</h2>\n  <ul>\n    <li><strong>Добавление уведомления</strong>: Клики по кнопкам вызывают функцию <code>addNotification(type)</code>, которая создаёт новое уведомление соответствующего типа.</li>\n    <li><strong>Автоматическое закрытие</strong>: Каждое уведомление автоматически скрывается через 5 секунд. Используется <code>setTimeout</code>, который хранится в <code>dataset</code> для последующей очистки при ручном закрытии.</li>\n    <li><strong>Ручное закрытие</strong>: При нажатии на крестик запускается функция <code>removeNotification</code>.</li>\n    <li><strong>Ограничение количества</strong>: Если на экране уже 5 уведомлений, самое старое удаляется перед добавлением нового.</li>\n    <li><strong>Анимации</strong>: Появление и исчезновение выполняются с использованием <code>opacity</code>, <code>transform</code>, <code>max-height</code>.</li>\n  </ul>\n\n  <h2>Стилизация</h2>\n  <p>Стили выполнены в тёмной теме с акцентами цветов:</p>\n  <ul>\n    <li><strong>Error:</strong> красный</li>\n    <li><strong>Warning:</strong> жёлтый</li>\n    <li><strong>Success:</strong> зелёный</li>\n  </ul>\n\n  <p>Каждый уровень уведомления имеет свой стиль ширины и прозрачности, чтобы создать эффект \"слоёв\", когда новые уведомления находятся поверх старых</p>\n\n  <h2>Возможности для доработки</h2>\n  <ul>\n    <li><strong>Поддержка кастомных сообщений</strong> — возможность передавать текст из поля ввода.</li>\n    <li><strong>Иконки</strong> — использование SVG или Font Awesome вместо текстовых символов.</li>\n    <li><strong>Темизация</strong> — светлая/тёмная тема переключается пользователем.</li>\n    <li><strong>Хук/функция API</strong> — использовать как библиотеку или модуль.</li>\n  </ul>', '[\"HTML\", \"CSS\", \"JavaScript\"]', NULL, '[{\"label\": \"Посмотреть проект\", \"url\": \"https://codepen.io/VlasovDevCore/pen/jEEYppK\"}]');

-- --------------------------------------------------------

--
-- Структура таблицы `skills`
--

CREATE TABLE `skills` (
  `id` int(11) NOT NULL,
  `name` varchar(50) NOT NULL,
  `icon_path` varchar(255) NOT NULL,
  `level` int(11) NOT NULL,
  `category` varchar(50) NOT NULL,
  `color` varchar(7) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Дамп данных таблицы `skills`
--

INSERT INTO `skills` (`id`, `name`, `icon_path`, `level`, `category`, `color`) VALUES
(1, 'HTML', 'https://vlasovdevcore.ru/images/code/html.svg', 90, 'technology', '#E34F26'),
(2, 'CSS', 'https://vlasovdevcore.ru/images/code/css.svg', 73, 'technology', '#1572B6'),
(3, 'JavaScript', 'https://vlasovdevcore.ru/images/code/JS.svg', 58, 'technology', '#F7DF1E'),
(4, 'TypeScript', 'https://vlasovdevcore.ru/images/code/typescript.svg', 60, 'technology', '#3178C6'),
(5, 'PHP', 'https://vlasovdevcore.ru/images/code/PHP.svg', 42, 'technology', '#8892BE'),
(6, 'React', 'https://vlasovdevcore.ru/images/code/react.svg', 68, 'tool', '#61DAFB'),
(7, 'Bootstrap', 'https://vlasovdevcore.ru/images/code/Bootsrap.svg', 74, 'tool', '#7952B3'),
(8, 'MySQL', 'https://vlasovdevcore.ru/images/code/mysql.svg', 43, 'tool', '#00678C'),
(9, 'Tailwind', 'https://vlasovdevcore.ru/images/code/tailwindcss.svg', 64, 'tool', '#38BDF8');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `blog_posts`
--
ALTER TABLE `blog_posts`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `projects`
--
ALTER TABLE `projects`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `skills`
--
ALTER TABLE `skills`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `blog_posts`
--
ALTER TABLE `blog_posts`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=37;

--
-- AUTO_INCREMENT для таблицы `projects`
--
ALTER TABLE `projects`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT для таблицы `skills`
--
ALTER TABLE `skills`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
